// Code generated by protoc-gen-go.
// source: micros.proto
// DO NOT EDIT!

/*
Package microspb is a generated protocol buffer package.

It is generated from these files:
	micros.proto

It has these top-level messages:
	UserRequest
	UserResponse
*/
package microspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserResponse struct {
	En   int32  `protobuf:"varint,1,opt,name=en" json:"en,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*UserRequest)(nil), "microspb.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "microspb.UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MicrosService service

type MicrosServiceClient interface {
	GetUserNameById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type microsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMicrosServiceClient(cc *grpc.ClientConn) MicrosServiceClient {
	return &microsServiceClient{cc}
}

func (c *microsServiceClient) GetUserNameById(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/microspb.MicrosService/GetUserNameById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicrosService service

type MicrosServiceServer interface {
	GetUserNameById(context.Context, *UserRequest) (*UserResponse, error)
}

func RegisterMicrosServiceServer(s *grpc.Server, srv MicrosServiceServer) {
	s.RegisterService(&_MicrosService_serviceDesc, srv)
}

func _MicrosService_GetUserNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrosServiceServer).GetUserNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microspb.MicrosService/GetUserNameById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrosServiceServer).GetUserNameById(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicrosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microspb.MicrosService",
	HandlerType: (*MicrosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserNameById",
			Handler:    _MicrosService_GetUserNameById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("micros.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcd, 0x4c, 0x2e,
	0xca, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf0, 0x0a, 0x92, 0x94, 0x54,
	0xb9, 0xb8, 0x43, 0x8b, 0x53, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb8,
	0xd8, 0x4a, 0x81, 0x5c, 0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x28, 0x4f, 0xc9,
	0x88, 0x8b, 0x07, 0xa2, 0xac, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x88, 0x8f, 0x8b, 0x29, 0x35,
	0x0f, 0xac, 0x86, 0x35, 0x08, 0xc8, 0x12, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60,
	0x02, 0x8a, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xc1, 0x5c, 0xbc, 0xbe, 0x60, 0x6b, 0x82, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x85, 0x9c, 0xb8, 0xf8, 0xdd, 0x53, 0x4b, 0x40, 0xe6, 0xf8, 0x01, 0xe5,
	0x9d, 0x2a, 0x3d, 0x53, 0x84, 0x44, 0xf5, 0x60, 0x2e, 0xd1, 0x43, 0x72, 0x86, 0x94, 0x18, 0xba,
	0x30, 0xc4, 0x5a, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x07, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x18, 0x13, 0x09, 0x8c, 0xd0, 0x00, 0x00, 0x00,
}
